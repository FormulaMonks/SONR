#!/usr/bin/env bash

RBENV_TAG="v0.4.0"
RBENV_DIR="${OPENSHIFT_BUILD_DEPENDENCIES_DIR}.rbenv/"
RBENV_GIT_URL="https://github.com/sstephenson/rbenv.git"

RUBYBUILD_GIT_URL="https://github.com/sstephenson/ruby-build.git"
RUBYBUILD_TAG="v20140225"
RUBYBUILD_DIR="$RBENV_DIR/plugins/ruby-build/"

NGINX_URL="http://nginx.org/download/"
NGINX_FILE="nginx-1.4.6"
NGINX_EXT=".tar.gz"
NGINX_DIR="${OPENSHIFT_DATA_DIR}nginx/"

PCRE_URL="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/"
PCRE_FILE="pcre-8.34"
PCRE_EXT=".tar.bz2"

UNICORN_DIR="${OPENSHIFT_DATA_DIR}/unicorn/"

echo "Running build script..."

# Install or update RBENV
if [ -d $RBENV_DIR ]; then
    echo "RBENV has already been installed. Updating it..."
    cd $RBENV_DIR
    git pull origin $RBENV_TAG
    git checkout $RBENV_TAG
else
    echo "Installing RBENV..."
    git clone $RBENV_GIT_URL $RBENV_DIR
    cd $RBENV_DIR
    git checkout $RBENV_TAG
fi

# Install or update ruby-build
if [ -d $RUBYBUILD_DIR ]; then
    echo "ruby-build has already been installed. Updating it..."
    cd $RUBYBUILD_DIR
    git pull origin $RUBYBUILD_TAG
    git checkout $RUBYBUILD_TAG
else
    echo "Installing ruby-build"
    git clone $RUBYBUILD_GIT_URL $RUBYBUILD_DIR
    cd $RUBYBUILD_DIR
    git checkout $RUBYBUILD_TAG
fi



source ${OPENSHIFT_REPO_DIR}.openshift/action_hooks/configenv

mkdir -p $RBENV_ROOT/cache

# Install Correct Ruby version into rbenv if necessary
if rbenv versions | grep -q `cat $OPENSHIFT_REPO_DIR/.ruby-version` ; then
    echo "We already have Ruby `cat $OPENSHIFT_REPO_DIR/.ruby-version` installed into rbenv. Skipping..."
else
    echo "Installing Ruby `cat $OPENSHIFT_REPO_DIR/.ruby-version` into rbenv..."
    rbenv install -v `cat $OPENSHIFT_REPO_DIR/.ruby-version`
    rm -rf ${OPENSHIFT_TMP_DIR}ruby-build*
fi


# Install nginx
# Inspired by https://www.openshift.com/blogs/lightweight-http-serving-using-nginx-on-openshift
if [ ! -e "${NGINX_DIR}sbin/nginx" ]; then
    echo "Installing nginx..."
    # We've got no if statements for a while, so let's exit if there's an error.
    set -e

    # Install PCRE engine for nginx
    cd $OPENSHIFT_TMP_DIR
    wget ${PCRE_URL}${PCRE_FILE}${PCRE_EXT}
    tar xjf ${PCRE_FILE}${PCRE_EXT}

    cd $OPENSHIFT_TMP_DIR
    wget ${NGINX_URL}${NGINX_FILE}${NGINX_EXT}
    tar xzf ${NGINX_FILE}${NGINX_EXT}
    cd $NGINX_FILE
    ./configure --prefix=$NGINX_DIR --with-pcre=${OPENSHIFT_TMP_DIR}${PCRE_FILE}
    make install
    make clean

    mkdir -p ${NGINX_DIR}run

    # TODO: Verify that "make clean" removes these files and folders:
    #rm ${OPENSHIFT_TMP_DIR}${NGINX_FILE}${NGINX_EXT}
    #rm ${OPENSHIFT_TMP_DIR}${PCRE_FILE}${PCRE_EXT}
    #rm -rf ${OPENSHIFT_TMP_DIR}${NGINX_FILE}
    #rm -rf ${OPENSHIFT_TMP_DIR}${PCRE_FILE}
fi

# Create nginx config file (do this every time; environment variables may have changed).
sed -e "s|NGINXDIR|${NGINX_DIR}|g" \
    -e "s|UNICORNDIR|${UNICORN_DIR}|g" \
    -e "s|OPENSHIFT_APP_DNS|${OPENSHIFT_APP_DNS}|g" \
    -e "s|OPENSHIFT_REPO_DIR|${OPENSHIFT_REPO_DIR}|g" \
    -e "s|OPENSHIFT_DIY_PORT|${OPENSHIFT_DIY_PORT}|g" \
    -e "s|OPENSHIFT_DIY_IP|${OPENSHIFT_DIY_IP}|g" \
    <${OPENSHIFT_REPO_DIR}nginx.conf >${NGINX_DIR}conf/nginx.conf

# Create nginx Directories
mkdir -p ${NGINX_DIR}lock/


# Configure Unicorn Directories
mkdir -p ${UNICORN_DIR}sockets
mkdir -p ${UNICORN_DIR}pids
mkdir -p ${UNICORN_DIR}log

echo "Install Gems..."
if gem list | grep -q "bundler ; then
    echo "Bundler already installed"
else
    gem install bundler
fi
cd $OPENSHIFT_REPO_DIR
bundle install

